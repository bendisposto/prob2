apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'

project.group = 'de.prob2'
sourceCompatibility = 1.6
def gradle_version = '1.0-rc-3'

project.version = '2.0.0-milestone-28'

repositories {
	maven {
		name "cobra"
		url "http://cobra.cs.uni-duesseldorf.de/artifactory/repo"
	}
}


configurations.all { resolutionStrategy.cacheChangingModulesFor 0, 'seconds' }


sourceSets.main.java.srcDirs = [
	'src/main/generated'] // ie there's no stand-alone java source
sourceSets.main.groovy.srcDir 'src/main/java' // ie include the 'java' dir as groovy source

def parser_version = '2.4.37'


dependencies {

 	//groovy 'org.codehaus.groovy:groovy-all:2.0.5'

	compile 'com.google.guava:guava:18.0'// Apache Licence 2.0
	compile 'commons-cli:commons-cli:1.2' // Apache Licence 2.0
//	compile 'commons-io:commons-io:2.4' // Apache Licence 2.0

	// Used for escaping HTML and Unicode symbols within Java strings
	compile 'commons-lang:commons-lang:2.6'

	compile 'org.codehaus.groovy:groovy-all:2.3.0' // Apache Licence 2.0
	//	compile 'org.fusesource.jansi:jansi:1.5' // Apache Licence 2.0
	//	compile 'jline:jline:0.9.94' // BSD

	// dependency for Worksheets
	compile 'org.pegdown:pegdown:1.1.0' // Apache Licence 2.0    Used for Worksheet

	compile 'com.google.inject:guice:3.0' // Apache Licence 2.0
	compile 'com.google.inject.extensions:guice-servlet:3.0' // Apache Licence 2.0
	compile 'org.slf4j:slf4j-api:1.6.1' // MIT
	compile 'ch.qos.logback:logback-core:0.9.29' // EPL
	compile 'ch.qos.logback:logback-classic:0.9.29' // EPL

    compile(group: 'org.eventb', name: 'org.eventb.core.ast', version: '3.0.0')

//	compile 'org.eventb:org.eventb.core.ast:2.6.0.r15029' // Rodin

//	compile 'commons-codec:commons-codec:1.6' // Apache Licence 2.0
	compile 'com.google.code.gson:gson:1.7.1' // Apache Licence 2.0

	// If you consider to update or downgrade jetty ... just don't
	// it'll make you puke
	compile 'org.eclipse.jetty:jetty-io:8.1.8.v20121106' // EPL
	compile 'org.eclipse.jetty:jetty-server:8.1.8.v20121106' // EPL
	compile 'org.eclipse.jetty:jetty-servlet:8.1.8.v20121106' // EPL
	compile 'org.eclipse.jetty:jetty-util:8.1.8.v20121106' // EPL
	compile 'org.eclipse.jetty:jetty-webapp:8.1.8.v20121106' // EPL

	// Dependencies for LtlPatterns
	compile 'org.antlr:antlr4-runtime:4.0'
	compile 'de.prob:ltl-dsl:1.0.0'

	compile group: "de.prob", name: "answerparser", version: parser_version , changing: true
	compile group: "de.prob", name: "bparser", version: parser_version , changing: true
	compile group: "de.prob", name: "cliparser", version: parser_version , changing: true
	compile group: "de.prob", name: "ltlparser", version: parser_version , changing: true
	compile group: "de.prob", name: "parserbase", version: parser_version , changing: true
	compile group: "de.prob", name: "prologlib", version: parser_version , changing: true
	compile group: "de.prob", name: "unicode", version: parser_version , changing: true
	compile group: "de.prob", name: "theorymapping", version: parser_version, changing: true
	compile group: "de.prob", name: "translator", version: parser_version, changing: true

	compile group: 'de.prob', name: 'tla2bAST', version: '1.0.5-SNAPSHOT', changing: true

	// The following dependencies are needed for FMI
	compile group: 'net.java.dev.jna', name: 'jna', version: '3.4.0'
	compile group: 'edu.berkeley.eecs.ptolemy', name: 'jfmi', version: '1.0.2-SNAPSHOT'


    compile group: 'de.prob', name: 'tla2bAST', version: '1.0.5-SNAPSHOT'

	compile 'junit:junit:4.8.2'
	compile 'org.spockframework:spock-core:0.7-groovy-2.0'
	compile 'com.github.spullara.mustache.java:compiler:0.8.12' // Apache Licence 2.0

	compile 'com.github.krukow:clj-ds:0.0.4'

	testCompile 'org.mockito:mockito-core:1.8.5'
	testCompile "org.gebish:geb-spock:0.9.1"
	testCompile 'org.seleniumhq.selenium:selenium-htmlunit-driver:2.26.0'

}

task createBuildConstants  {
	doFirst {
		def buildconstants_class = """
version=${project.version}"""
		File f = file("src/main/resources/build.properties")
		f.delete()
		f <<  buildconstants_class
	}
}



compileGroovy { dependsOn= [createBuildConstants]}





test.doFirst { systemProperties['integrationtest'] = 'true' }

groovydoc {
	docTitle="ProB Core "+project.version
}

task wrapper(type: Wrapper) { gradleVersion = gradle_version }

def download(address,target) {
	def file = new FileOutputStream(target)
	def out = new BufferedOutputStream(file)
	out << new URL(address).openStream()
	out.close()
}

public  String getProBDirectory() {
	String homedir = System.getProperty("prob.home");
	if (homedir != null)
		return homedir + java.io.File.separator;
	return System.getProperty("user.home") + java.io.File.separator + ".prob"
	+ java.io.File.separator;
}


task downloadCli << {
	def dir = getProBDirectory();
	delete file(dir)
	new File(dir).mkdirs()
	def targetdir = dir
	def targetzip = dir+os_extension()+".zip"
	def url = "http://nightly.cobra.cs.uni-duesseldorf.de/cli/" +os_extension()+ ".zip"
	download(url,targetzip)
	FileTree zip = zipTree(targetzip)
	copy {
		from zip
		into targetdir
	}
	delete file(targetzip)

	def targetName = "cspmf-"
	def os = os_extension()
	if(os == "probcli_linux32") {
		targetName += "linux32"
	} else if(os == "probcli_linux64") {
		targetName += "linux64"
	} else if(os == "probcli_leopard64") {
		targetName += "leopard64"
	} else if(os == "probcli_win32") {
		targetName += "windows"
	}
	def target = dir+File.separator+"lib"+File.separator+"cspmf"
	if(targetName == "cspmf-windows") {
		target += ".exe"
	}

	download("http://nightly.cobra.cs.uni-duesseldorf.de/cspmf/"+targetName,target)
	new File(target).setExecutable(true)
}

test {
  ignoreFailures=true
  dependsOn << downloadCli
}

def os_extension() {
	def bits = System.getProperty("sun.arch.data.model");
	def os = System.getProperty("os.name").toLowerCase()
	if (os.indexOf("mac") > -1) {
		return "probcli_leopard64"
	}
	if (os.indexOf("win") > -1 ) {
		return "probcli_win32"
	}
	else return "probcli_linux" + (bits.equals("64") ? "64": "32")
}

// run integration tests after downloading fresh CLI from Nightly Build
task integrationtests(dependsOn: ['classes', 'downloadCli'], type:JavaExec){
	main = 'de.prob.Main'
	classpath = sourceSets.main.runtimeClasspath
	args = ['-test', 'groovyTests']
}

// run integration tests WITHOUT downloading fresh CLI from Nightly Build
task tests(dependsOn: ['classes'], type:JavaExec){
	main = 'de.prob.Main'
	classpath = sourceSets.main.runtimeClasspath
	args = ['-test', 'groovyTests']
}

eclipse {
	project {
		name = 'de.prob2.kernel'
	}
}

task deploy(type: Copy, dependsOn: build) {
    into "$buildDir/libs"
    from configurations.runtime
}


tasks.eclipse.dependsOn createBuildConstants
