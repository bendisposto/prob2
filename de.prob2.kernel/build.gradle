apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'

project.group = 'de.hhu.stups'
sourceCompatibility = 1.6
targetCompatibility = 1.6



def gradle_version = '1.0-rc-3'

project.version = '2.0.0'

repositories {
	mavenCentral();
	maven {
		name "sonatype snapshots"
		url "https://oss.sonatype.org/content/repositories/snapshots"
	}
	maven {
		name "sonatype snapshots"
		url "https://oss.sonatype.org/content/repositories/releases"
	}
}


configurations.all { resolutionStrategy.cacheChangingModulesFor 0, 'seconds' }


sourceSets.main.java.srcDirs = [
	'src/main/generated'] // ie there's no stand-alone java source
sourceSets.main.groovy.srcDir 'src/main/java' // ie include the 'java' dir as groovy source

def parser_version = '2.5.1'


dependencies {

	compile 'com.google.guava:guava:18.0'// Apache Licence 2.0
	compile 'commons-cli:commons-cli:1.2' // Apache Licence 2.0

	// Used for escaping HTML and Unicode symbols within Java strings
	compile 'commons-lang:commons-lang:2.6'

	compile 'org.codehaus.groovy:groovy-all:2.3.0' // Apache Licence 2.0

	compile 'com.google.inject:guice:3.0' // Apache Licence 2.0
	compile 'org.slf4j:slf4j-api:1.6.1' // MIT
	compile 'ch.qos.logback:logback-core:0.9.29' // EPL
	compile 'ch.qos.logback:logback-classic:0.9.29' // EPL

	compile 'com.google.code.gson:gson:1.7.1' // Apache Licence 2.0

  compile(group: 'de.hhu.stups', name: 'rodin-eventb-ast', version: '3.2.0')

	compile group: "de.hhu.stups", name: "answerparser", version: parser_version , changing: true
	compile group: "de.hhu.stups", name: "bparser", version: parser_version , changing: true
	compile group: "de.hhu.stups", name: "cliparser", version: parser_version , changing: true
	compile group: "de.hhu.stups", name: "ltlparser", version: parser_version , changing: true
	compile group: "de.hhu.stups", name: "parserbase", version: parser_version , changing: true
	compile group: "de.hhu.stups", name: "prologlib", version: parser_version , changing: true
	compile group: "de.hhu.stups", name: "unicode", version: parser_version , changing: true
	compile group: "de.hhu.stups", name: "theorymapping", version: parser_version, changing: true
	compile group: "de.hhu.stups", name: "translator", version: parser_version, changing: true
	compile group: "de.hhu.stups", name: "eventbalg", version: parser_version, changing: true

	compile group: 'de.hhu.stups', name: 'tla2bAST', version: '1.0.8', changing: true

	// The following dependencies are needed for FMI
	compile group: 'net.java.dev.jna', name: 'jna', version: '3.4.0'
	compile group: 'de.hhu.stups', name: 'ptolemy-jfmi', version: '1.1.0'



	compile 'junit:junit:4.8.2'
	compile 'org.spockframework:spock-core:0.7-groovy-2.0'

	compile 'com.github.krukow:clj-ds:0.0.4'

	testCompile 'org.mockito:mockito-core:1.8.5'
	testCompile "org.gebish:geb-spock:0.9.1"

}

def download(address,target) {
	def file = new FileOutputStream(file(target).path)
	def out = new BufferedOutputStream(file)
	out << new URL(address).openStream()
	out.close()
}

ext{
	cli_version = '1.5.1-beta4'
}


def downloadUrlPath() {
  if (project.version.endsWith("-SNAPSHOT")) {
		return "https://www3.hhu.de/stups/downloads/prob/cli/nightly/"
	}
	else {

		return "https://www3.hhu.de/stups/downloads/prob/cli/releases/" + cli_version + "/"
	}
}


task downloadCLIs << {
		def dir = 'src/main/resources/cli/'
		delete file(dir)
		def f = file(dir)
	  f.mkdirs()

		['leopard64','linux32','linux64','win32','win64'].each { n ->

			def targetdir = dir+n
			def targetzip = dir+"probcli_${n}.zip"
			def url = downloadUrlPath()+"probcli_${n}.zip"
			download(url,targetzip)

			def cspmfname = n
			if (n.startsWith("win")) {
				n = "windows.exe"
			}
			cspmfname = "cspmf-"+n
			def target = dir+cspmfname
			download("http://www3.hhu.de/stups/downloads/cspmf/"+cspmfname,target)
			file(target).setExecutable(true)
		}

		['32','64'].each { winV ->
			def targetzip = dir+"windowslib${winV}.zip"
			download(downloadUrlPath()+"windowslib${winV}.zip",targetzip)
		}
}

task createBuildConstants  {
	doFirst {
		def buildconstants_class = """
version=${project.version}"""
		File f = file("src/main/resources/build.properties")
		f.delete()
		f <<  buildconstants_class
	}
	dependsOn downloadCLIs
}

compileGroovy { dependsOn= [createBuildConstants]}


test.doFirst { systemProperties['integrationtest'] = 'true' }

groovydoc {
	docTitle="ProB Core "+project.version
}

task wrapper(type: Wrapper) { gradleVersion = gradle_version }

test {
  ignoreFailures=true
}

def os_extension() {
	def bits = System.getProperty("sun.arch.data.model");
	def os = System.getProperty("os.name").toLowerCase()
	if (os.indexOf("mac") > -1) {
		return "probcli_leopard64"
	}
	if (os.indexOf("win") > -1 ) {
		return "probcli_win32"
	}
	else return "probcli_linux" + (bits.equals("64") ? "64": "32")
}

// run integration tests after downloading fresh CLI from Nightly Build
task integrationtests(dependsOn: ['downloadCLIs','tests']);

// run integration tests WITHOUT downloading fresh CLI from Nightly Build
task tests(dependsOn: ['classes'], type:JavaExec){
	main = 'de.prob.Main'
	classpath = sourceSets.main.runtimeClasspath
	args = ['-script', 'groovyTests']
}

eclipse {
	project {
		name = 'de.prob2.kernel'
	}
}

task deploy(type: Copy, dependsOn: build) {
    into "$buildDir/libs"
    from configurations.runtime
}


javadoc {
	failOnError = false
}

tasks.eclipse.dependsOn createBuildConstants

if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {

println "Configuring deployment for ${ project.name }"

apply plugin: 'signing'

task javadocJar(type: Jar) {
	 classifier = 'javadoc'
	 from javadoc
}

task sourcesJar(type: Jar) {
	 classifier = 'sources'
	 from sourceSets.main.allSource
}

artifacts {
	 archives javadocJar, sourcesJar
}


signing {
	 sign configurations.archives
}

uploadArchives {
 repositories {
	 mavenDeployer {
		 beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

		 repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
			 authentication(userName: ossrhUsername, password: ossrhPassword)
		 }

		 snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
			 authentication(userName: ossrhUsername, password: ossrhPassword)
		 }

		 pom.project {
			 name "prob2-kernel"
			 packaging 'jar'
			 // optionally artifactId can be defined here
			 description 'The ProB 2.0 Kernel'
			 url 'http://www.prob2.de'

			 licenses {
				 license {
					 name 'Eclipse Public License, Version 1.0'
					 url 'http://www.eclipse.org/org/documents/epl-v10.html'
				 }
			 }

			 scm {
				 connection 'scm:git:git://github.com/bendisposto/prob2.git'
				 developerConnection 'scm:git:git@github.com:bendisposto/prob2.git'
				 url 'https://github.com/bendisposto/prob2'
			 }


			 developers {
				 developer {
					 id 'bendisposto'
					 name 'Jens Bendisposto'
					 email 'jens@bendisposto.de'
				 }
			 }
		 }
	 }
 }
}
}
