plugins {
	id "org.sonarqube" version "2.6.2"
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'jacoco'

project.group = 'de.hhu.stups'
sourceCompatibility = 1.8
targetCompatibility = 1.8

final SOURCE_ENCODING = "UTF-8"


if (System.env.TRAVIS == 'true') {
	allprojects {
		tasks.withType(GroovyCompile) {
			groovyOptions.fork = false
		}
		tasks.withType(Test) {
			// containers (currently) have 2 dedicated cores and 4GB of memory
			maxParallelForks = 2
			minHeapSize = '128m'
		}
	}
}


// IMPORTANT !!!
project.version = '3.2.12-SNAPSHOT'
// Remember to release the cli
//  - create a tag in the prob_prolog repository
//  - enter this tag into the jenkins job "http://alfred.cs.uni-duesseldorf.de/view/All/job/cli_release/"
//  - enter the same tag into the jenkins job "http://alfred.cs.uni-duesseldorf.de/view/All/job/crosscompile_release/"
ext {
	cli_version = '1.8.2-beta2'
}
// IMPORTANT !!!


final parser_version
final cliDownloadURL
if (project.version.endsWith("-SNAPSHOT")) {
	parser_version = '2.9.14-SNAPSHOT'
	cliDownloadURL = "https://www3.hhu.de/stups/downloads/prob/cli/nightly"
} else {
	parser_version = '2.9.13'
	cliDownloadURL = "https://www3.hhu.de/stups/downloads/prob/cli/releases/${cli_version}"
}


mainClassName = "de.prob.Main"


repositories {
	mavenCentral()
	maven {
		name "sonatype snapshots"
		url "https://oss.sonatype.org/content/repositories/snapshots"
	}
	maven {
		name "sonatype snapshots"
		url "https://oss.sonatype.org/content/repositories/releases"
	}
}


configurations.all {
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}


// in order to compile the mix of java and groovy in this project we compile all files using the groovy compiler
sourceSets.main.groovy.srcDirs = ['src/main/groovy', 'src/main/java'] // i.e. include the 'java' dir as groovy source
sourceSets.main.java.srcDirs = [] // i.e. there's no stand-alone java source


dependencies {

	compile 'com.google.code.findbugs:jsr305:3.0.2'

	compile 'com.google.guava:guava:26.0-jre'// Apache Licence 2.0
	compile 'commons-cli:commons-cli:1.4' // Apache Licence 2.0

	// Used for escaping HTML and Unicode symbols within Java strings
	compile 'commons-lang:commons-lang:2.6'

	compile 'org.codehaus.groovy:groovy:2.5.2' // Apache Licence 2.0
	compile 'org.codehaus.groovy:groovy-jsr223:2.5.2' // Apache Licence 2.0
	compile 'org.codehaus.groovy:groovy-nio:2.5.2' // Apache Licence 2.0
	compile 'org.codehaus.groovy:groovy-xml:2.5.2' // Apache Licence 2.0

	compile 'com.google.inject:guice:4.2.1' // Apache Licence 2.0
	compile 'org.slf4j:slf4j-api:1.7.25' // MIT
	compile 'ch.qos.logback:logback-core:1.2.3' // EPL
	compile 'ch.qos.logback:logback-classic:1.2.3' // EPL

	compile 'com.google.code.gson:gson:2.8.5' // Apache Licence 2.0

	compile(group: 'de.hhu.stups', name: 'rodin-eventb-ast', version: '3.2.0')

	compile group: "de.hhu.stups", name: "answerparser", version: parser_version , changing: true
	compile group: "de.hhu.stups", name: "bparser", version: parser_version , changing: true
	compile group: "de.hhu.stups", name: "cliparser", version: parser_version , changing: true
	compile group: "de.hhu.stups", name: "ltlparser", version: parser_version , changing: true
	compile group: "de.hhu.stups", name: "parserbase", version: parser_version , changing: true
	compile group: "de.hhu.stups", name: "prologlib", version: parser_version , changing: true
	compile group: "de.hhu.stups", name: "unicode", version: parser_version , changing: true
	compile group: "de.hhu.stups", name: "theorymapping", version: parser_version, changing: true
	compile group: "de.hhu.stups", name: "translator", version: parser_version, changing: true
	compile group: "de.hhu.stups", name: "eventbalg", version: parser_version, changing: true

	compile group: 'de.hhu.stups', name: 'tla2bAST', version: '1.1.0'

	compile group: 'de.hhu.stups', name: 'ltl-dsl', version: '0.1.1'


	// The following dependencies are needed for FMI
	compile group: 'net.java.dev.jna', name: 'jna', version: '3.4.0'
	compile group: 'de.hhu.stups', name: 'ptolemy-jfmi', version: '1.1.0'



	compile 'junit:junit:4.12'
	compile 'org.spockframework:spock-core:1.2-groovy-2.5'

	compile 'com.github.krukow:clj-ds:0.0.4'

	// annotations to suppress findbugs warnings
	compile group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.1u2'

	testCompile 'org.mockito:mockito-core:1.10.19'

}

if (project.hasProperty("probHome")) {
	allprojects {
		tasks.withType(JavaForkOptions) {
			systemProperties["prob.home"] = project.probHome
		}
	}
}

tasks.withType(JavaCompile) {
	options.encoding = SOURCE_ENCODING
}

tasks.withType(GroovyCompile) {
	options.encoding = SOURCE_ENCODING
}

tasks.withType(Javadoc) {
	options.encoding = SOURCE_ENCODING
}

// The Groovydoc encoding can't be set via the task, it depends on the file.encoding system property of the Gradle JVM.
// FIXME This needs to be set in the gradle.properties, but the file is encrypted.

sonarqube {
	properties {
		property("sonar.java.binaries", sourceSets.main.groovy.outputDir.path)
		property("sonar.projectKey", "prob2kernel")
		property("sonar.projectName", "prob2kernel")
		property("sonar.exclusions", "de.prob2.kernel/gradle/wrapper/*,de.prob2.kernel/build/**/*,de.prob2.kernel/groovyIntegrationTests/*")
		property("sonar.login", System.getenv("SONAR_TOKEN"))
	}
}

def download(address, target) {
	final targetFile = file(target)
	final connection = (HttpURLConnection)new URL(address).openConnection()
	connection.ifModifiedSince = targetFile.lastModified()
	connection.connect()
	if (connection.responseCode == HttpURLConnection.HTTP_NOT_MODIFIED) {
		println("Not redownloading ${address} because ${target} is up-to-date")
	} else {
		println("Downloading ${address} to ${target}")
		connection.inputStream.withStream {inp ->
			targetFile.withOutputStream {out ->
				out << inp
			}
		}
		targetFile.lastModified = connection.lastModified
	}
}

task downloadCLIs {
	doLast {
		final targetDir = 'src/main/resources/cli'
		file(targetDir).mkdirs()

		final files = []
		[
			'leopard64',
			'linux32',
			'linux64',
			'win32',
			'win64',
		].each {platform ->
			files << "probcli_${platform}.zip"
		}
		['32', '64'].each {bits ->
			files << "windowslib${bits}.zip"
		}

		files.each {filename ->
			download("${cliDownloadURL}/${filename}", "${targetDir}/${filename}")
		}
	}
}

task downloadCSPMFrontend {
	doLast {
		final cspmfDownloadURL = "https://www3.hhu.de/stups/downloads/cspmf"
		final targetDir = 'src/main/resources/cli'
		[
			'darwin-64': 'leopard64',
			'linux-32': 'linux32',
			'linux-64': 'linux64',
			'windows': 'windows',
		].each {cspmfPlatform, probPlatform ->
			final libName
			if (cspmfPlatform == "windows") {
				libName = "cspmf.exe"
			} else {
				libName = "cspmf"
			}
			final target = "${targetDir}/${probPlatform}-${libName}"
			download("${cspmfDownloadURL}/${cspmfPlatform}/${libName}", target)
			file(target).executable = true
		}
	}
	dependsOn downloadCLIs
}

def getCheckedOutGitCommitHash() {
	def gitFolder = "$projectDir/../.git/"
	def takeFromHash = 40
	try {
		def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
		def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
		if (isCommit) {
			return head[0].trim().take(takeFromHash) // e5a7c79edabb
		}
		def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
		refHead.text.trim().take takeFromHash
	} catch (Exception e) {
		"unknown"
	}
}

task createBuildConstants  {
	doFirst {
		def buildconstants_class = """
version=${project.version}
git=${getCheckedOutGitCommitHash()}"""
		File f = file("src/main/resources/prob2-build.properties")
		f.delete()
		f << buildconstants_class
	}
	if (!project.hasProperty("probHome")) {
		// Automatically download probcli/cspmf, unless a custom PROB_HOME is set
		dependsOn(downloadCSPMFrontend)
	}
}

compileGroovy {
	dependsOn = [createBuildConstants]
}


test.doFirst {
	systemProperties['integrationtest'] = 'true'
}

test {
	exclude('de/prob/cli/integration')
	testLogging {
		exceptionFormat = 'full'
	}
	jacoco {
		destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
	}
}

groovydoc {
	docTitle="ProB Core "+project.version
}

wrapper {
	gradleVersion = "4.9"
	distributionType = Wrapper.DistributionType.ALL
}

// run integration tests after downloading fresh CLI from Nightly Build
task allTests(dependsOn: ['downloadCLIs', 'test', 'groovyIntegrationTests', 'cliIntegrationTests'])

// run groovy integration tests WITHOUT downloading fresh CLI from Nightly Build
task groovyIntegrationTests(type: JavaExec, dependsOn: ['classes']) {
	main = 'de.prob.Main'
	classpath = sourceSets.main.runtimeClasspath
	args = ['-script', 'groovyTests']
}
project.jacoco.applyTo(groovyIntegrationTests)


task cliIntegrationTests(type: Test, dependsOn: ['downloadCLIs','test']) {
	doFirst {
		println("Running cli integration tests")
	}
	scanForTestClasses = true
	include('de/prob/cli/integration/**/*')
	jacoco {
		destinationFile = file("$buildDir/jacoco/jacocoCliIntegrationTests.exec")
	}
}

jacoco {
	toolVersion = "0.8.1"
}
task codeCoverageReport(type: JacocoReport, dependsOn: ['allTests']) {
	sourceDirectories = files([])
	classDirectories = files('build/classes/groovy/main')
	//onlyIf = {true}
	reports {
		xml.enabled false
		csv.enabled false
		html.destination new File("${buildDir}/jacocoHtml")
	}
	executionData(test, groovyIntegrationTests, cliIntegrationTests)
}

check.dependsOn codeCoverageReport

eclipse {
	project {
		name = 'de.prob2.kernel'
	}
}
tasks.eclipse.dependsOn createBuildConstants

task deploy(type: Copy, dependsOn: build) {
	into "$buildDir/libs"
	from configurations.runtime
}

javadoc {
	failOnError = false
}


if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {

	println "Configuring deployment for ${ project.name }"

	apply plugin: 'signing'

	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	artifacts {
		archives javadocJar, sourcesJar
	}

	signing {
		sign configurations.archives
	}

	uploadArchives {
		repositories {
			mavenDeployer {
				beforeDeployment { MavenDeployment deployment ->
					signing.signPom(deployment)
				}

				repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}

				snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}

				pom.project {
					name "prob2-kernel"
					packaging 'jar'
					// optionally artifactId can be defined here
					description 'The ProB 2.0 Kernel'
					url 'http://www.prob2.de'

					licenses {
						license {
							name 'Eclipse Public License, Version 1.0'
							url 'http://www.eclipse.org/org/documents/epl-v10.html'
						}
					}

					scm {
						connection 'scm:git:git://github.com/bendisposto/prob2.git'
						developerConnection 'scm:git:git@github.com:bendisposto/prob2.git'
						url 'https://github.com/bendisposto/prob2'
					}


					developers {
						developer {
							id 'bendisposto'
							name 'Jens Bendisposto'
							email 'jens@bendisposto.de'
						}
					}
				}
			}
		}
	}
}
