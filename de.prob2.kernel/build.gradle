plugins {
  id "org.sonarqube" version "2.5"
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'jacoco'

project.group = 'de.hhu.stups'
sourceCompatibility = 1.8
targetCompatibility = 1.8


if (System.env.TRAVIS == 'true') {
  allprojects {
    tasks.withType(GroovyCompile) {
      groovyOptions.fork = false
    }
    tasks.withType(Test) {
      // containers (currently) have 2 dedicated cores and 4GB of memory
      maxParallelForks = 2
      minHeapSize = '128m'
    }
  }
}


def gradle_version = '4.2.1'



// IMPORTANT !!!
project.version = '3.2.8-SNAPSHOT'
// Remember to release the cli
//  - create a tag in the prob_prolog repository
//  - enter this tag into the jenkins job "http://alfred.cs.uni-duesseldorf.de/view/All/job/cli_release/"
//  - enter the same tag into the jenkins job "http://alfred.cs.uni-duesseldorf.de/view/All/job/crosscompile_release/"
ext{ cli_version = '1.7.2-beta4' }
// IMPORTANT !!!


def parser_version

if (project.version.endsWith("-SNAPSHOT")) {
	parser_version = '2.9.10-SNAPSHOT'
}
else {
	parser_version = '2.9.9'
}


mainClassName = "de.prob.Main"


repositories {
	mavenCentral();
	maven {
		name "sonatype snapshots"
		url "https://oss.sonatype.org/content/repositories/snapshots"
	}
	maven {
		name "sonatype snapshots"
		url "https://oss.sonatype.org/content/repositories/releases"
	}
}


configurations.all { resolutionStrategy.cacheChangingModulesFor 0, 'seconds' }


// in order to compile the mix of java and groovy in this project we compile all files using the groovy compiler
sourceSets.main.groovy.srcDirs = ['src/main/groovy', 'src/main/java'] // i.e. include the 'java' dir as groovy source
sourceSets.main.java.srcDirs = [] // i.e. there's no stand-alone java source


dependencies {

	compile 'com.google.code.findbugs:jsr305:3.0.2'

	compile 'com.google.guava:guava:19.0'// Apache Licence 2.0
	compile 'commons-cli:commons-cli:1.2' // Apache Licence 2.0

	// Used for escaping HTML and Unicode symbols within Java strings
	compile 'commons-lang:commons-lang:2.6'

	compile 'org.codehaus.groovy:groovy-all:2.4.12' // Apache Licence 2.0

	compile 'com.google.inject:guice:4.0' // Apache Licence 2.0
	compile 'org.slf4j:slf4j-api:1.7.21' // MIT
	compile 'ch.qos.logback:logback-core:1.1.8' // EPL
	compile 'ch.qos.logback:logback-classic:1.1.7' // EPL

	compile 'com.google.code.gson:gson:1.7.1' // Apache Licence 2.0

	compile(group: 'de.hhu.stups', name: 'rodin-eventb-ast', version: '3.2.0')

	compile group: "de.hhu.stups", name: "answerparser", version: parser_version , changing: true
	compile group: "de.hhu.stups", name: "bparser", version: parser_version , changing: true
	compile group: "de.hhu.stups", name: "cliparser", version: parser_version , changing: true
	compile group: "de.hhu.stups", name: "ltlparser", version: parser_version , changing: true
	compile group: "de.hhu.stups", name: "parserbase", version: parser_version , changing: true
	compile group: "de.hhu.stups", name: "prologlib", version: parser_version , changing: true
	compile group: "de.hhu.stups", name: "unicode", version: parser_version , changing: true
	compile group: "de.hhu.stups", name: "theorymapping", version: parser_version, changing: true
	compile group: "de.hhu.stups", name: "translator", version: parser_version, changing: true
	compile group: "de.hhu.stups", name: "eventbalg", version: parser_version, changing: true

	compile group: 'de.hhu.stups', name: 'tla2bAST', version: '1.0.8', changing: true

	compile group: 'de.hhu.stups', name: 'ltl-dsl', version: '0.1.1-SNAPSHOT'


	// The following dependencies are needed for FMI
	compile group: 'net.java.dev.jna', name: 'jna', version: '3.4.0'
	compile group: 'de.hhu.stups', name: 'ptolemy-jfmi', version: '1.1.0'



	compile 'junit:junit:4.8.2'
	//	compile 'org.spockframework:spock-core:0.7-groovy-2.0'
	compile 'org.spockframework:spock-core:1.0-groovy-2.4'

	compile 'com.github.krukow:clj-ds:0.0.4'

	// annotations to suppress findbugs warnings
	compile group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.1u2'

	testCompile 'org.mockito:mockito-core:1.10.19'

}

sonarqube {
	properties {
		property("sonar.java.binaries", sourceSets.main.groovy.outputDir.path)
		property("sonar.projectKey", "prob2kernel")
		property("sonar.projectName", "prob2kernel")
		property("sonar.exclusions", "de.prob2.kernel/gradle/wrapper/*,de.prob2.kernel/build/**/*,de.prob2.kernel/groovyIntegrationTests/*")
		property("sonar.organization", "prob2")
		property("sonar.login", System.getenv("SONAR_TOKEN"))
	}
}

def download(address,target) {
	def file = new FileOutputStream(file(target).path)
	def out = new BufferedOutputStream(file)
	out << new URL(address).openStream()
	out.close()
}



def downloadUrlPath() {
	if (project.version.endsWith("-SNAPSHOT")) {
		return "https://www3.hhu.de/stups/downloads/prob/cli/nightly/"
	}
	else {
		return "https://www3.hhu.de/stups/downloads/prob/cli/releases/" + cli_version + "/"
	}
}

def cspmfmapping(n) {
	def m = ['darwin-64': 'leopard64',
	         'linux-32': 'linux32',
					 'linux-64': 'linux64',
					 'windows': 'windows']
	return m.get(n)
}




task downloadCLIs {
	doLast {
		def dir = 'src/main/resources/cli/'
		delete file(dir)
		def f = file(dir)
		f.mkdirs()

		[
			'leopard64',
			'linux32',
			'linux64',
			'win32',
			'win64'
		].each { n ->
			def targetdir = dir+n
			def targetzip = dir+"probcli_${n}.zip"
			def url = downloadUrlPath()+"probcli_${n}.zip"
			download(url,targetzip)
		}

		['32', '64'].each { winV ->
			def targetzip = dir+"windowslib${winV}.zip"
			download(downloadUrlPath()+"windowslib${winV}.zip",targetzip)
		}
	}
}

task downloadCSPMFrontend {
	doLast {
		def dir = 'src/main/resources/cli/'
		['darwin-64',
		 'linux-32',
		 'linux-64',
		 'windows',
		].each { n ->
	   def libName = "cspmf"
		 def target = dir + cspmfmapping(n) + "-cspmf"
		 if (n=="windows") {
			 target += ".exe"
			 libName += ".exe"
	   }
		 download('https://www3.hhu.de/stups/downloads/cspmf/'+n+'/'+libName,target)
		 file(target).setExecutable(true)
		}
	}
	dependsOn downloadCLIs
}

def getCheckedOutGitCommitHash() {
    def gitFolder = "$projectDir/../.git/"
    def takeFromHash = 40
    try{
     def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
     def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
     if(isCommit) return head[0].trim().take(takeFromHash) // e5a7c79edabb
     def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
     refHead.text.trim().take takeFromHash
    } catch (Exception e) { "unknown" }
}

task createBuildConstants  {
	doFirst {
		def buildconstants_class = """
version=${project.version}
git=${getCheckedOutGitCommitHash()}"""
		File f = file("src/main/resources/prob2-build.properties")
		f.delete()
		f <<  buildconstants_class
	}
	dependsOn downloadCSPMFrontend
}

compileGroovy { dependsOn= [createBuildConstants]}


test.doFirst { systemProperties['integrationtest'] = 'true' }

test {
  exclude('de/prob/cli/integration')
  testLogging {
    exceptionFormat = 'full'
  }
	jacoco {
		destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
	}
}

groovydoc {
	docTitle="ProB Core "+project.version
}

task wrapper(type: Wrapper) { gradleVersion = gradle_version }


def os_extension() {
	def bits = System.getProperty("sun.arch.data.model");
	def os = System.getProperty("os.name").toLowerCase()
	if (os.indexOf("mac") > -1) {
		return "probcli_leopard64"
	}
	if (os.indexOf("win") > -1 ) {
		return "probcli_win32"
	}
	else return "probcli_linux" + (bits.equals("64") ? "64": "32")
}

// run integration tests after downloading fresh CLI from Nightly Build
task allTests(dependsOn: ['downloadCLIs', 'test', 'groovyIntegrationTests', 'cliIntegrationTests']);

// run groovy integration tests WITHOUT downloading fresh CLI from Nightly Build
task groovyIntegrationTests(type:JavaExec, dependsOn: ['classes']){
	main = 'de.prob.Main'
	classpath = sourceSets.main.runtimeClasspath
	args = ['-script', 'groovyTests']
}
project.jacoco.applyTo(groovyIntegrationTests)


task cliIntegrationTests(type: Test, dependsOn: ['downloadCLIs','test']){
  doFirst{ println("Running cli integration tests") }
  scanForTestClasses = true
  include('de/prob/cli/integration/**/*')
	jacoco {
		destinationFile = file("$buildDir/jacoco/jacocoCliIntegrationTests.exec")
	}
}

jacoco {
    toolVersion = "0.7.9"
}
task codeCoverageReport(type:JacocoReport, dependsOn: ['allTests']){
	sourceDirectories = files([])
	classDirectories = files('build/classes/groovy/main')
	//onlyIf = {true}
	reports {
		xml.enabled false
		csv.enabled false
		html.destination new File("${buildDir}/jacocoHtml")
	}
	executionData(test, groovyIntegrationTests, cliIntegrationTests)
}

check.dependsOn codeCoverageReport

eclipse {
	project { name = 'de.prob2.kernel' }
}
tasks.eclipse.dependsOn createBuildConstants

task deploy(type: Copy, dependsOn: build) {
	into "$buildDir/libs"
	from configurations.runtime
}

javadoc { failOnError = false }


if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {

	println "Configuring deployment for ${ project.name }"

	apply plugin: 'signing'

	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	artifacts { archives javadocJar, sourcesJar }


	signing { sign configurations.archives }

	uploadArchives {
		repositories {
			mavenDeployer {
				beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

				repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}

				snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}

				pom.project {
					name "prob2-kernel"
					packaging 'jar'
					// optionally artifactId can be defined here
					description 'The ProB 2.0 Kernel'
					url 'http://www.prob2.de'

					licenses {
						license {
							name 'Eclipse Public License, Version 1.0'
							url 'http://www.eclipse.org/org/documents/epl-v10.html'
						}
					}

					scm {
						connection 'scm:git:git://github.com/bendisposto/prob2.git'
						developerConnection 'scm:git:git@github.com:bendisposto/prob2.git'
						url 'https://github.com/bendisposto/prob2'
					}


					developers {
						developer {
							id 'bendisposto'
							name 'Jens Bendisposto'
							email 'jens@bendisposto.de'
						}
					}
				}
			}
		}
	}
}
