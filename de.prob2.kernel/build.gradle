plugins {
	id "de.undercouch.download" version "3.4.3"
	id "org.sonarqube" version "2.7.1"
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'jacoco'

project.group = 'de.hhu.stups'
sourceCompatibility = 1.8
targetCompatibility = 1.8

final SOURCE_ENCODING = "UTF-8"


if (System.env.TRAVIS == 'true') {
	allprojects {
		tasks.withType(GroovyCompile) {
			groovyOptions.fork = false
		}
		tasks.withType(Test) {
			// containers (currently) have 2 dedicated cores and 4GB of memory
			maxParallelForks = 2
			minHeapSize = '128m'
		}
	}
}


// IMPORTANT !!!
project.version = '4.0.0-SNAPSHOT'
// Remember to release the cli
//  - create a tag in the prob_prolog repository
//  - enter this tag into the jenkins job "http://alfred.cs.uni-duesseldorf.de/view/All/job/cli_release/"
//  - enter the same tag into the jenkins job "http://alfred.cs.uni-duesseldorf.de/view/All/job/crosscompile_release/"
ext {
	cli_version = '1.9.0'
}
// IMPORTANT !!!


def parserVersion
def cliDownloadURL
if (project.version.endsWith("-SNAPSHOT")) {
	parserVersion = '2.9.23-SNAPSHOT'
	cliDownloadURL = "https://www3.hhu.de/stups/downloads/prob/cli/nightly"
} else {
	parserVersion = '2.9.22'
	cliDownloadURL = "https://www3.hhu.de/stups/downloads/prob/cli/releases/${cli_version}"
}


mainClassName = "de.prob.Main"


repositories {
	mavenCentral()
	maven {
		name "sonatype snapshots"
		url "https://oss.sonatype.org/content/repositories/snapshots"
	}
	maven {
		name "sonatype snapshots"
		url "https://oss.sonatype.org/content/repositories/releases"
	}
}


configurations.all {
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}


// in order to compile the mix of java and groovy in this project we compile all files using the groovy compiler
sourceSets.main.groovy.srcDirs = ['src/main/groovy', 'src/main/java'] // i.e. include the 'java' dir as groovy source
sourceSets.main.java.srcDirs = [] // i.e. there's no stand-alone java source


dependencies {
	// ProB parser dependencies (Eclipse Public License 1.0)
	// These are marked as changing, because parserVersion may be a snapshot version.
	compile group: "de.hhu.stups", name: "answerparser", version: parserVersion, changing: true
	compile group: "de.hhu.stups", name: "bparser", version: parserVersion, changing: true
	compile group: "de.hhu.stups", name: "cliparser", version: parserVersion, changing: true
	compile group: "de.hhu.stups", name: "eventbalg", version: parserVersion, changing: true
	compile group: "de.hhu.stups", name: "ltlparser", version: parserVersion, changing: true
	compile group: "de.hhu.stups", name: "parserbase", version: parserVersion, changing: true
	compile group: "de.hhu.stups", name: "prologlib", version: parserVersion, changing: true
	compile group: "de.hhu.stups", name: "unicode", version: parserVersion, changing: true
	compile group: "de.hhu.stups", name: "theorymapping", version: parserVersion, changing: true
	compile group: "de.hhu.stups", name: "translator", version: parserVersion, changing: true

	// Groovy (Apache License 2.0)
	final groovyVersion = "2.5.6"
	compile group: "org.codehaus.groovy", name: "groovy", version: groovyVersion
	compile group: "org.codehaus.groovy", name: "groovy-jsr223", version: groovyVersion
	compile group: "org.codehaus.groovy", name: "groovy-nio", version: groovyVersion
	compile group: "org.codehaus.groovy", name: "groovy-xml", version: groovyVersion

	// Logging
	compile group: "ch.qos.logback", name: "logback-core", version: "1.2.3" // Eclipse Public License 1.0
	compile group: "ch.qos.logback", name: "logback-classic", version: "1.2.3" // Eclipse Public License 1.0
	compile group: "org.slf4j", name: "slf4j-api", version: "1.7.25" // MIT License

	// Misc dependencies
	compile group: "com.github.krukow", name: "clj-ds", version: "0.0.4" // Eclipse Public License 1.0
	compile group: "com.google.code.gson", name: "gson", version: "2.8.5" // Apache License 2.0
	compile group: "com.google.guava", name: "guava", version: "26.0-jre" // Apache License 2.0
	compile group: "com.google.inject", name: "guice", version: "4.2.2" // Apache License 2.0
	compile group: "commons-cli", name: "commons-cli", version: "1.4" // Apache License 2.0
	compile group: "de.hhu.stups", name: "alloy2b", version: "1.1-BETA", changing: true
	compile group: "de.hhu.stups", name: "ltl-dsl", version: "0.1.2-SNAPSHOT" // Eclipse Public License 1.0
	compile group: "de.hhu.stups", name: "rodin-eventb-ast", version: "3.2.0" // Eclipse Public License 1.0
	compile group: "de.hhu.stups", name: "tla2bAST", version: "1.1.0" // Eclipse Public License 1.0

	// The following dependencies are needed for FMI
	compile group: "de.hhu.stups", name: "ptolemy-jfmi", version: "1.1.0" // Non-standard license (MIT/BSD-ish)
	compile group: "net.java.dev.jna", name: "jna", version: "5.2.0" // GNU LGPL 2.1

	// Annotations
	compile group: "com.google.code.findbugs", name: "jsr305", version: "3.0.2" // Apache License 2.0

	// Test dependencies
	testCompile group: "junit", name: "junit", version: "4.12" // Eclipse Public License 1.0
	testCompile group: "org.spockframework", name: "spock-core", version: "1.2-groovy-2.5" // Apache License 2.0
	// Byte Buddy and Objenesis are needed by Spock to mock classes
	testRuntimeOnly group: "net.bytebuddy", name: "byte-buddy", version: "1.9.10" // Apache License 2.0
	testRuntimeOnly group: "org.objenesis", name: "objenesis", version: "3.0.1" // Apache License 2.0
}

if (project.hasProperty("probHome")) {
	allprojects {
		tasks.withType(JavaForkOptions) {
			systemProperties["prob.home"] = project.probHome
		}
	}
}

tasks.withType(JavaCompile) {
	options.encoding = SOURCE_ENCODING
}

tasks.withType(GroovyCompile) {
	options.encoding = SOURCE_ENCODING
}

tasks.withType(Javadoc) {
	options.encoding = SOURCE_ENCODING
}

// The Groovydoc encoding can't be set via the task, it depends on the file.encoding system property of the Gradle JVM.
// FIXME This needs to be set in the gradle.properties, but the file is encrypted.

sonarqube {
	properties {
		property("sonar.java.binaries", sourceSets.main.groovy.outputDir.path)
		property("sonar.projectKey", "prob2kernel")
		property("sonar.projectName", "prob2kernel")
		property("sonar.exclusions", "de.prob2.kernel/gradle/wrapper/*,de.prob2.kernel/build/**/*,de.prob2.kernel/groovyIntegrationTests/*")
		property("sonar.login", System.getenv("SONAR_TOKEN"))
	}
}

final CLI_DOWNLOAD_DIR = file("src/main/resources/de/prob/cli/binaries")

task downloadCLIs(type: Download) {
	final files = []
	[
		'leopard64',
		'linux32',
		'linux64',
		'win32',
		'win64',
	].each {platform ->
		files << "probcli_${platform}.zip"
	}
	['32', '64'].each {bits ->
		files << "windowslib${bits}.zip"
	}

	src(files.collect {"${cliDownloadURL}/${it}"})
	dest(CLI_DOWNLOAD_DIR)
	onlyIfModified(true)
}

task downloadCSPMFrontend {
	final cspmfDownloadURL = "https://www3.hhu.de/stups/downloads/cspmf"
	final files = [
		'darwin-64': 'leopard64',
		'linux-32': 'linux32',
		'linux-64': 'linux64',
		'windows': 'windows',
	].collectEntries {cspmfPlatform, probPlatform ->
		def libName
		if (cspmfPlatform == "windows") {
			libName = "cspmf.exe"
		} else {
			libName = "cspmf"
		}
		// Note: toString is used here to eagerly evaluate the GString (which is not hashed properly otherwise)
		[("${cspmfDownloadURL}/${cspmfPlatform}/${libName}".toString()): new File(CLI_DOWNLOAD_DIR, "${probPlatform}-${libName}")]
	}

	doLast {
		CLI_DOWNLOAD_DIR.mkdirs()
		files.each {url, target ->
			download {
				src(url)
				dest(target)
				onlyIfModified(true)
			}
			target.executable = true
		}
	}
}

task cleanDownloads(type: Delete) {
	delete(CLI_DOWNLOAD_DIR)
}
clean.dependsOn(cleanDownloads)

def readCurrentGitCommit() {
	def proc = ["git", "rev-parse", "HEAD"].execute(null, project.projectDir)
	def exitCode = proc.waitFor()
	if (exitCode != 0) {
		throw new IllegalStateException("git rev-parse command exited with status code ${exitCode}:\n" + proc.err.readLines().join("\n"))
	}
	return proc.in.readLines()[0]
}

final BUILD_PROPERTIES = file("src/main/resources/de/prob/build.properties")

task createBuildConstants {
	doFirst {
		BUILD_PROPERTIES.delete()
		BUILD_PROPERTIES << "version=${project.version}\n"
		BUILD_PROPERTIES << "git=${readCurrentGitCommit()}\n"
	}
}
processResources.dependsOn(createBuildConstants)

task cleanBuildConstants(type: Delete) {
	delete(BUILD_PROPERTIES)
}
clean.dependsOn(cleanBuildConstants)

if (!project.hasProperty("probHome")) {
	// Automatically download probcli/cspmf, unless a custom PROB_HOME is set
	processResources.dependsOn(downloadCLIs, downloadCSPMFrontend)
}

test.doFirst {
	systemProperties['integrationtest'] = 'true'
}

test {
	exclude('de/prob/cli/integration')
	testLogging {
		exceptionFormat = 'full'
	}
	jacoco {
		destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
	}
}

groovydoc {
	docTitle="ProB Core "+project.version
}

wrapper {
	gradleVersion = "5.4"
	distributionType = Wrapper.DistributionType.ALL
}

// run integration tests after downloading fresh CLI from Nightly Build
task allTests(dependsOn: ['downloadCLIs', 'test', 'groovyIntegrationTests', 'cliIntegrationTests'])

// run groovy integration tests WITHOUT downloading fresh CLI from Nightly Build
task groovyIntegrationTests(type: JavaExec, dependsOn: ['classes']) {
	main = 'de.prob.Main'
	classpath = sourceSets.main.runtimeClasspath
	args = ['-script', 'groovyTests']
}
project.jacoco.applyTo(groovyIntegrationTests)


task cliIntegrationTests(type: Test, dependsOn: ['downloadCLIs','test']) {
	doFirst {
		println("Running cli integration tests")
	}
	scanForTestClasses = true
	include('de/prob/cli/integration/**/*')
	jacoco {
		destinationFile = file("$buildDir/jacoco/jacocoCliIntegrationTests.exec")
	}
}

jacoco {
	toolVersion = "0.8.2"
}
task codeCoverageReport(type: JacocoReport, dependsOn: ['allTests']) {
	sourceDirectories.from([])
	classDirectories.from('build/classes/groovy/main')
	//onlyIf = {true}
	reports {
		xml.enabled false
		csv.enabled false
		html.destination new File("${buildDir}/jacocoHtml")
	}
	executionData(test, groovyIntegrationTests, cliIntegrationTests)
}

check.dependsOn codeCoverageReport

eclipse {
	project {
		name = 'de.prob2.kernel'
	}
}
tasks.eclipse.dependsOn createBuildConstants

task deploy(type: Copy, dependsOn: build) {
	into "$buildDir/libs"
	from configurations.runtime
}

javadoc {
	failOnError = false
}


if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {

	println "Configuring deployment for ${ project.name }"

	apply plugin: 'signing'

	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	artifacts {
		archives javadocJar, sourcesJar
	}

	signing {
		sign configurations.archives
	}

	uploadArchives {
		repositories {
			mavenDeployer {
				beforeDeployment { MavenDeployment deployment ->
					signing.signPom(deployment)
				}

				repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}

				snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}

				pom.project {
					name "prob2-kernel"
					packaging 'jar'
					// optionally artifactId can be defined here
					description 'The ProB 2.0 Kernel'
					url 'http://www.prob2.de'

					licenses {
						license {
							name 'Eclipse Public License, Version 1.0'
							url 'http://www.eclipse.org/org/documents/epl-v10.html'
						}
					}

					scm {
						connection 'scm:git:git://github.com/bendisposto/prob2.git'
						developerConnection 'scm:git:git@github.com:bendisposto/prob2.git'
						url 'https://github.com/bendisposto/prob2'
					}


					developers {
						developer {
							id 'bendisposto'
							name 'Jens Bendisposto'
							email 'jens@bendisposto.de'
						}
					}
				}
			}
		}
	}
}
