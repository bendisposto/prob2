<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.theory.core.scTheoryRoot org.eventb.core.accurate="true" org.eventb.core.configuration="org.eventb.theory.core.thy" org.eventb.core.source="/BasicTheory/BinaryTree.tuf">
<org.eventb.theory.core.scTypeParameter name="T" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.typeParameter#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDatatypeDefinition name="Tree" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.datatypeDefinition#(" org.eventb.theory.core.hasError="false">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.datatypeDefinition#(|org.eventb.theory.core.typeArgument#'" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="empty" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.datatypeDefinition#(|org.eventb.theory.core.datatypeConstructor#("/>
<org.eventb.theory.core.scDatatypeConstructor name="tree" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.datatypeDefinition#(|org.eventb.theory.core.datatypeConstructor#)">
<org.eventb.theory.core.scConstructorArgument name="left" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.datatypeDefinition#(|org.eventb.theory.core.datatypeConstructor#)|org.eventb.theory.core.constructorArgument#'" org.eventb.core.type="Tree"/>
<org.eventb.theory.core.scConstructorArgument name="val" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.datatypeDefinition#(|org.eventb.theory.core.datatypeConstructor#)|org.eventb.theory.core.constructorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="right" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.datatypeDefinition#(|org.eventb.theory.core.datatypeConstructor#)|org.eventb.theory.core.constructorArgument#)" org.eventb.core.type="Tree"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Tref" org.eventb.core.label="treeDepth" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Tree(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="t">
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="empty ⦂ Tree(T)" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="tree(l,v,r)" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="1+max({treeDepth(l),treeDepth(r)})"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Treg" org.eventb.core.label="mirror" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Tree(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Tree(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="t">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="empty ⦂ Tree(T)" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="empty ⦂ Tree(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="tree(l,v,r)" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="tree(mirror(r),v,mirror(l))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scProofRulesBlock name="generatedBlock" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.newOperatorDefinition#)">
<org.eventb.theory.core.scMetavariable name="t" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.core.type="Tree(T)"/>
<org.eventb.theory.core.scRewriteRule name="BinaryTree.treeDepth case 0" org.eventb.core.accurate="true" org.eventb.core.label="BinaryTree.treeDepth case 0" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="treeDepth expansion" org.eventb.theory.core.formula="treeDepth(empty ⦂ Tree(T))">
<org.eventb.theory.core.scRewriteRuleRHS name="treeDepth rhs" org.eventb.core.label="treeDepth rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.formula="0"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BinaryTree.treeDepth case 1" org.eventb.core.accurate="true" org.eventb.core.label="BinaryTree.treeDepth case 1" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="treeDepth expansion" org.eventb.theory.core.formula="treeDepth(tree(l,v,r))">
<org.eventb.theory.core.scRewriteRuleRHS name="treeDepth rhs" org.eventb.core.label="treeDepth rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.formula="1+max({treeDepth(l),treeDepth(r)})"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scMetavariable name="l" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.core.type="Tree(T)"/>
<org.eventb.theory.core.scMetavariable name="r" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.core.type="Tree(T)"/>
<org.eventb.theory.core.scMetavariable name="v" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRewriteRule name="BinaryTree.mirror case 0" org.eventb.core.accurate="true" org.eventb.core.label="BinaryTree.mirror case 0" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="mirror expansion" org.eventb.theory.core.formula="mirror(empty ⦂ Tree(T))">
<org.eventb.theory.core.scRewriteRuleRHS name="mirror rhs" org.eventb.core.label="mirror rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.formula="empty ⦂ Tree(T)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BinaryTree.mirror case 1" org.eventb.core.accurate="true" org.eventb.core.label="BinaryTree.mirror case 1" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="mirror expansion" org.eventb.theory.core.formula="mirror(tree(l,v,r))">
<org.eventb.theory.core.scRewriteRuleRHS name="mirror rhs" org.eventb.core.label="mirror rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.formula="tree(mirror(r),v,mirror(l))"/>
</org.eventb.theory.core.scRewriteRule>
</org.eventb.theory.core.scProofRulesBlock>
<org.eventb.theory.core.scProofRulesBlock name="generatedBlocl" org.eventb.core.label="rulesBlock1" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.proofRulesBlock#,">
<org.eventb.theory.core.scMetavariable name="t" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.proofRulesBlock#,|org.eventb.theory.core.metaVariable#'" org.eventb.core.type="Tree(T)"/>
<org.eventb.theory.core.scRewriteRule name="u" org.eventb.core.accurate="true" org.eventb.core.label="rew1" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.proofRulesBlock#,|org.eventb.theory.core.rewriteRule#(" org.eventb.theory.core.applicability="both" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="mirror mirror" org.eventb.theory.core.formula="mirror(mirror(t))">
<org.eventb.theory.core.scRewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/BinaryTree.tuf|org.eventb.theory.core.theoryRoot#BinaryTree|org.eventb.theory.core.proofRulesBlock#,|org.eventb.theory.core.rewriteRule#(|org.eventb.theory.core.rewriteRuleRHS#'" org.eventb.theory.core.formula="t"/>
</org.eventb.theory.core.scRewriteRule>
</org.eventb.theory.core.scProofRulesBlock>
</org.eventb.theory.core.scTheoryRoot>
